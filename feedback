mon, nov 13, 2017
Data files should not reside in your software repository.
Place them in a sibling directory to your project directory.
Call that directory "data" so that it refers to the same location
that my scripts do.
After you do that use the git rm command to remove those files from your
repository.

wed, nov 22, 2017
You still have some input data files in your repo, which need to be removed, including 
operation_sequence_medium. The constructor in your OperationBatchTester class has 
definitely grown way beyond the point of being single responsibility. Typically a 
constructor initializes the state of a class and not much more. In the context of 
the project we are building for this course, your OperationBatchTester constructor 
should basically parse command line parameters then call this or that function 
and/or instantiate this or that class in order to fulfill the requirements specified 
by those command line parameters, plus pass on those command line parameters to other 
controllers that might need them. So one good way to go about doing this would be to 
have five controllers: namely the outer one that main calls, and four controllers 
for each of the subprojects that we've created, namely a controller for matrix stuff, 
one for trees, one for hashing, and one for TSP solving. While this might seem like a 
lot of work, it will actually clean up your code a great deal and make it so much 
easier to see what's going on.
In your AVLTree class you have methods gsh and gshRoot, which appear to rebalance the 
tree, however their names are very unclear. Some other programmer shouldn't have to 
read through the entire method in order figure out what it does. The name of the 
method should document that, and gsh and gshRoot do not accomplish that objective.
Plus, if anything the word "Root" would be more appropriate for the method you call 
gsh, because it actually always uses the root node for its call, whereas your 
method gshRoot descends down the tree. The same critique can be made about your 
method deleteTree, because it doesn't delete the whole tree, but instead deletes a 
single node. I cannot overempahsize the importance of naming variables, classes, and 
methods in ways that render abundantly clear what's going on and which end up
necessitating fewer explanatory comments.
